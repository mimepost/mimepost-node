/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mimepost);
  }
}(this, function(expect, Mimepost) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mimepost.EmailsApi();
  });

  describe('(package)', function() {
    describe('EmailsApi', function() {
      describe('sendEmail', function() {
        it('should call sendEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for sendEmail call and complete the assertions
          /*
          var body = new Mimepost.Email();
          body.html = "<p>This is an example html content</p>";
          body.subject = "This is an example subject";
          body.from_email = "from@example.com";
          body.from_name = "Sender Name";
          body.global_merge_vars = [new Mimepost.EmailGlobalMergeVars()];
          body.global_merge_vars[0].name = "FIRST_NAME";
          body.global_merge_vars[0].value = "Dear Sir/Madam";
          body.to = [new Mimepost.EmailTo()];
          body.to[0].email = "to@example.com";
          body.to[0].merge_vars = [new Mimepost.EmailMergeVars()];
          body.to[0].merge_vars[0].name = "FIRST_NAME";
          body.to[0].merge_vars[0].value = "Joe Smith";
          body.cc = ["cc@example.com"];
          body.bcc = ["bcc@example.com"];
          body.attachments = [new Mimepost.EmailAttachments()];
          body.attachments[0].name = "mypic.png";
          body.attachments[0].type = "image/png";
          body.attachments[0].content = "base64 encoded content";
          body.vars = {"user_id":"ea1fd1fd-8a4e-4e14-a8ad-ff06c6420ea1","invoice_id":"3339d083-7cc9-4d2a-9c77-9b6e862c27b9"};

          instance.sendEmail(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
