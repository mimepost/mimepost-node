/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/ApiResponseAllWebhooks', 'model/ApiResponseSingleWebhooks', 'model/ApiResponseWebhooks', 'model/Webhook', 'model/Webhook1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/ApiResponseAllWebhooks'), require('../model/ApiResponseSingleWebhooks'), require('../model/ApiResponseWebhooks'), require('../model/Webhook'), require('../model/Webhook1'));
  } else {
    // Browser globals (root is window)
    if (!root.Mimepost) {
      root.Mimepost = {};
    }
    root.Mimepost.WebhooksApi = factory(root.Mimepost.ApiClient, root.Mimepost.ApiResponse, root.Mimepost.ApiResponseAllWebhooks, root.Mimepost.ApiResponseSingleWebhooks, root.Mimepost.ApiResponseWebhooks, root.Mimepost.Webhook, root.Mimepost.Webhook1);
  }
}(this, function(ApiClient, ApiResponse, ApiResponseAllWebhooks, ApiResponseSingleWebhooks, ApiResponseWebhooks, Webhook, Webhook1) {
  'use strict';

  /**
   * Webhooks service.
   * @module api/WebhooksApi
   * @version 0.1.0
   */

  /**
   * Constructs a new WebhooksApi. 
   * @alias module:api/WebhooksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webhooksGet operation.
     * @callback module:api/WebhooksApi~webhooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseAllWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of all the webhooks
     * @param {module:api/WebhooksApi~webhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseAllWebhooks}
     */
    this.webhooksGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseAllWebhooks;

      return this.apiClient.callApi(
        '/webhooks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIdDelete operation.
     * @callback module:api/WebhooksApi~webhooksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single webhook
     * @param {Number} id 
     * @param {module:api/WebhooksApi~webhooksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    this.webhooksIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponse;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIdGet operation.
     * @callback module:api/WebhooksApi~webhooksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSingleWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a single webhook
     * @param {Number} id 
     * @param {module:api/WebhooksApi~webhooksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSingleWebhooks}
     */
    this.webhooksIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseSingleWebhooks;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIdPut operation.
     * @callback module:api/WebhooksApi~webhooksIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseSingleWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the details of a single webhook
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Webhook1} opts.webhook 
     * @param {module:api/WebhooksApi~webhooksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseSingleWebhooks}
     */
    this.webhooksIdPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['webhook'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseSingleWebhooks;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksPost operation.
     * @callback module:api/WebhooksApi~webhooksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponseWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add single webhook
     * @param {Object} opts Optional parameters
     * @param {module:model/Webhook} opts.webhook 
     * @param {module:api/WebhooksApi~webhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponseWebhooks}
     */
    this.webhooksPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['webhook'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiResponseWebhooks;

      return this.apiClient.callApi(
        '/webhooks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
