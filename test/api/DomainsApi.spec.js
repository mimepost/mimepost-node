/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mimepost);
  }
}(this, function(expect, Mimepost) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mimepost.DomainsApi();
  });

  describe('(package)', function() {
    describe('DomainsApi', function() {
      describe('domainsGet', function() {
        it('should call domainsGet successfully', function(done) {
          // TODO: uncomment domainsGet call and complete the assertions
          /*

          instance.domainsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponseDomainsList);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Mimepost.ApiResponseDomainsListData);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("");
                expect(data.selector).to.be.a('string');
                expect(data.selector).to.be("");
                expect(data.instance_name).to.be.a('string');
                expect(data.instance_name).to.be("");
                expect(data.spf_verified).to.be.a('number');
                expect(data.spf_verified).to.be(0);
                expect(data.dkim_verified).to.be.a('number');
                expect(data.dkim_verified).to.be(0);
                expect(data.tracking_verified).to.be.a('number');
                expect(data.tracking_verified).to.be(0);
                expect(data.verified).to.be.a('number');
                expect(data.verified).to.be(0);
                expect(data.approved).to.be.a('number');
                expect(data.approved).to.be(0);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("WAITING_APPROVA");
                expect(data.status_desc).to.be.a('string');
                expect(data.status_desc).to.be("");
                expect(data.entered).to.be.a('string');
                expect(data.entered).to.be("yyyy-mm-dd H:i:s");
                expect(data.active).to.be.a('number');
                expect(data.active).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdApprovePost', function() {
        it('should call domainsIdApprovePost successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdApprovePost call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdApprovePost(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdDelete', function() {
        it('should call domainsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdDelete call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdGet', function() {
        it('should call domainsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdGet call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponseDomainsList);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Mimepost.ApiResponseDomainsListData);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("");
                expect(data.selector).to.be.a('string');
                expect(data.selector).to.be("");
                expect(data.instance_name).to.be.a('string');
                expect(data.instance_name).to.be("");
                expect(data.spf_verified).to.be.a('number');
                expect(data.spf_verified).to.be(0);
                expect(data.dkim_verified).to.be.a('number');
                expect(data.dkim_verified).to.be(0);
                expect(data.tracking_verified).to.be.a('number');
                expect(data.tracking_verified).to.be(0);
                expect(data.verified).to.be.a('number');
                expect(data.verified).to.be(0);
                expect(data.approved).to.be.a('number');
                expect(data.approved).to.be(0);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("WAITING_APPROVA");
                expect(data.status_desc).to.be.a('string');
                expect(data.status_desc).to.be("");
                expect(data.entered).to.be.a('string');
                expect(data.entered).to.be("yyyy-mm-dd H:i:s");
                expect(data.active).to.be.a('number');
                expect(data.active).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdVerifyDkimPost', function() {
        it('should call domainsIdVerifyDkimPost successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdVerifyDkimPost call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdVerifyDkimPost(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdVerifySpfPost', function() {
        it('should call domainsIdVerifySpfPost successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdVerifySpfPost call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdVerifySpfPost(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsIdVerifyTrackingPost', function() {
        it('should call domainsIdVerifyTrackingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsIdVerifyTrackingPost call and complete the assertions
          /*
          var id = 56;

          instance.domainsIdVerifyTrackingPost(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('domainsPost', function() {
        it('should call domainsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for domainsPost call and complete the assertions
          /*
          var opts = {};
          opts.domain = new Mimepost.Domain();
          opts.domain.domain = "yourdomain.com";

          instance.domainsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
