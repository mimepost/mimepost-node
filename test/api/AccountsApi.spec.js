/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mimepost);
  }
}(this, function(expect, Mimepost) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mimepost.AccountsApi();
  });

  describe('(package)', function() {
    describe('AccountsApi', function() {
      describe('accountProfileGet', function() {
        it('should call accountProfileGet successfully', function(done) {
          // TODO: uncomment accountProfileGet call and complete the assertions
          /*

          instance.accountProfileGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.AccountProfileResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.data).to.be.a(Mimepost.AccountProfile);
                  expect(data.data.first_name).to.be.a('string');
              expect(data.data.first_name).to.be("Joe");
              expect(data.data.last_name).to.be.a('string');
              expect(data.data.last_name).to.be("doe");
              expect(data.data.address).to.be.a('string');
              expect(data.data.address).to.be("245, Highway Street");
              expect(data.data.city).to.be.a('string');
              expect(data.data.city).to.be("New York");
              expect(data.data.country).to.be.a('string');
              expect(data.data.country).to.be("USA");
              expect(data.data.phone_number).to.be.a('string');
              expect(data.data.phone_number).to.be("1111 2222 3333");
              expect(data.data.skype_id).to.be.a('string');
              expect(data.data.skype_id).to.be("mime_post");
              expect(data.data.company_name).to.be.a('string');
              expect(data.data.company_name).to.be("Your Company, LLP");
              expect(data.data.website).to.be.a('string');
              expect(data.data.website).to.be("example.com");
              expect(data.data.twitter_handle).to.be.a('string');
              expect(data.data.twitter_handle).to.be("@mime_post");
              expect(data.data.linkedin).to.be.a('string');
              expect(data.data.linkedin).to.be("");
              expect(data.data.billing_name).to.be.a('string');
              expect(data.data.billing_name).to.be("");
              expect(data.data.billing_company_name).to.be.a('string');
              expect(data.data.billing_company_name).to.be("");
              expect(data.data.billing_address).to.be.a('string');
              expect(data.data.billing_address).to.be("");
              expect(data.data.username).to.be.a('string');
              expect(data.data.username).to.be("mimepost_username");
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("joe@example.com");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountProfilePost', function() {
        it('should call accountProfilePost successfully', function(done) {
          // TODO: uncomment, update parameter values for accountProfilePost call and complete the assertions
          /*
          var body = new Mimepost.AccountProfile();
          body.first_name = "Joe";
          body.last_name = "doe";
          body.address = "245, Highway Street";
          body.city = "New York";
          body.country = "USA";
          body.phone_number = "1111 2222 3333";
          body.skype_id = "mime_post";
          body.company_name = "Your Company, LLP";
          body.website = "example.com";
          body.twitter_handle = "@mime_post";
          body.linkedin = "";
          body.billing_name = "";
          body.billing_company_name = "";
          body.billing_address = "";
          body.username = "mimepost_username";
          body.email = "joe@example.com";

          instance.accountProfilePost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('settingsGet', function() {
        it('should call settingsGet successfully', function(done) {
          // TODO: uncomment settingsGet call and complete the assertions
          /*

          instance.settingsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.AccountSettings);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.value).to.be.a('string');
            expect(data.value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('settingsPost', function() {
        it('should call settingsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for settingsPost call and complete the assertions
          /*
          var body = new Mimepost.AccountSettings();
          body.name = "";
          body.value = "";

          instance.settingsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponse);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(1);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.error_code).to.be.a('number');
            expect(data.error_code).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
