/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mimepost);
  }
}(this, function(expect, Mimepost) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Mimepost.StatsApi();
  });

  describe('(package)', function() {
    describe('StatsApi', function() {
      describe('emaillogsGet', function() {
        it('should call emaillogsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for emaillogsGet call and complete the assertions
          /*
          var start_date = "start_date_example";
          var end_date = "end_date_example";
          var opts = {};
          opts.status = "status_example";
          opts.to = "to_example";
          opts.page = 56;
          opts.limit = 56;

          instance.emaillogsGet(start_date, end_date, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponseEmaillogs);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Mimepost.ApiResponseEmaillogsData);
                expect(data.datetime).to.be.a('string');
                expect(data.datetime).to.be("");
                expect(data.message_id).to.be.a('string');
                expect(data.message_id).to.be("");
                expect(data.to_email).to.be.a('string');
                expect(data.to_email).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.details).to.be.a('string');
                expect(data.details).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('statsGet', function() {
        it('should call statsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for statsGet call and complete the assertions
          /*
          var start_date = "start_date_example";
          var end_date = "end_date_example";

          instance.statsGet(start_date, end_date, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Mimepost.ApiResponseStats);
            expect(data.success).to.be.a('number');
            expect(data.success).to.be(0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.data).to.be.a(Mimepost.ApiResponseStatsData);
                  expect(data.data.total_summary).to.be.a(Mimepost.ApiResponseStatsDataTotalSummary);
                    expect(data.data.total_summary.status).to.be.a(Mimepost.ApiResponseStatsDataTotalSummaryStatus);
                      expect(data.data.total_summary.status.count).to.be.a('number');
                  expect(data.data.total_summary.status.count).to.be(0);
                  expect(data.data.total_summary.status.perc).to.be.a('string');
                  expect(data.data.total_summary.status.perc).to.be("");
              expect(data.data.datewise_summary).to.be.a(Mimepost.ApiResponseStatsDataDatewiseSummary);
                    expect(data.data.datewise_summary._date).to.be.a(Mimepost.ApiResponseStatsDataTotalSummary);
                      expect(data.data.datewise_summary._date.status).to.be.a(Mimepost.ApiResponseStatsDataTotalSummaryStatus);
                        expect(data.data.datewise_summary._date.status.count).to.be.a('number');
                    expect(data.data.datewise_summary._date.status.count).to.be(0);
                    expect(data.data.datewise_summary._date.status.perc).to.be.a('string');
                    expect(data.data.datewise_summary._date.status.perc).to.be("");
              expect(data.data.graph_summary).to.be.a(Mimepost.ApiResponseStatsDataGraphSummary);
                    {
                  let dataCtr = data.data.graph_summary.dates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.graph_summary.status_counts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
