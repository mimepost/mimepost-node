/*
 * Mimepost
 * MimePost API for sending email. You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Mimepost);
  }
}(this, function(expect, Mimepost) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ApiResponseDomainsListData', function() {
      beforeEach(function() {
        instance = new Mimepost.ApiResponseDomainsListData();
      });

      it('should create an instance of ApiResponseDomainsListData', function() {
        // TODO: update the code to test ApiResponseDomainsListData
        expect(instance).to.be.a(Mimepost.ApiResponseDomainsListData);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property domain (base name: "domain")', function() {
        // TODO: update the code to test the property domain
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property selector (base name: "selector")', function() {
        // TODO: update the code to test the property selector
        expect(instance).to.have.property('selector');
        // expect(instance.selector).to.be(expectedValueLiteral);
      });

      it('should have the property instance_name (base name: "instance_name")', function() {
        // TODO: update the code to test the property instance_name
        expect(instance).to.have.property('instance_name');
        // expect(instance.instance_name).to.be(expectedValueLiteral);
      });

      it('should have the property spf_verified (base name: "spf_verified")', function() {
        // TODO: update the code to test the property spf_verified
        expect(instance).to.have.property('spf_verified');
        // expect(instance.spf_verified).to.be(expectedValueLiteral);
      });

      it('should have the property dkim_verified (base name: "dkim_verified")', function() {
        // TODO: update the code to test the property dkim_verified
        expect(instance).to.have.property('dkim_verified');
        // expect(instance.dkim_verified).to.be(expectedValueLiteral);
      });

      it('should have the property tracking_verified (base name: "tracking_verified")', function() {
        // TODO: update the code to test the property tracking_verified
        expect(instance).to.have.property('tracking_verified');
        // expect(instance.tracking_verified).to.be(expectedValueLiteral);
      });

      it('should have the property verified (base name: "verified")', function() {
        // TODO: update the code to test the property verified
        expect(instance).to.have.property('verified');
        // expect(instance.verified).to.be(expectedValueLiteral);
      });

      it('should have the property approved (base name: "approved")', function() {
        // TODO: update the code to test the property approved
        expect(instance).to.have.property('approved');
        // expect(instance.approved).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property status_desc (base name: "status_desc")', function() {
        // TODO: update the code to test the property status_desc
        expect(instance).to.have.property('status_desc');
        // expect(instance.status_desc).to.be(expectedValueLiteral);
      });

      it('should have the property entered (base name: "entered")', function() {
        // TODO: update the code to test the property entered
        expect(instance).to.have.property('entered');
        // expect(instance.entered).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

    });
  });

}));
